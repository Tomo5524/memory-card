{"version":3,"sources":["components/nav.js","components/showCards.js","components/footer.js","components/card.js","index.js"],"names":["Nav","props","console","log","className","playNum","turn","ShowCards","value","flipped","name","onClick","id","Footer","style","display","gameDone","Card","cards","cards_arr","map","card","key","App","useState","setCards","firstCard","setFirstCard","setgameDone","setplayNum","pairedNum","setPairedNum","count","setCount","setTurn","lockBoard","setlockBoard","useEffect","new_arr","i","card_name","j","new_obj","uniqid","paired","push","a","length","Math","floor","random","shuffle","editCards","item","temp","Object","assign","flipCard","setTimeout","hanldePaired","firstCardId","SecondCardId","unflipChosenCard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b0ecc14.chunk.js","sourcesContent":["import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n\r\nfunction Nav(props) {\r\n  console.log(props, \"proops in nav\");\r\n  return (\r\n    <div className=\"d-flex justify-content-between align-items-center py-4 text-white\">\r\n      <h1>Stacks Memory Card</h1>\r\n      <div>\r\n        <h4>Game: {props.playNum}</h4>\r\n        <h4>Turn: {props.turn}</h4>\r\n      </div>\r\n\r\n      {/* <Card\r\n          value={library}\r\n          changeHandle={deleteHandle}\r\n          changeToggle={handleToggle}\r\n        /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","// import React from \"react\";\r\nimport React from \"react\";\r\n// import \"font-awesome/css/font-awesome.min.css\";\r\n\r\nfunction ShowCards(props) {\r\n  console.log(props, \"props in ShowCards ///////////////\");\r\n  //   const [card, setState] = useState({\r\n  //     bg: \"white\", // the name of stack, e,g, Python\r\n  //     fliped: false,\r\n  //   });\r\n\r\n  //   useEffect(() => {\r\n  //     let new_bg = card.fliped ? \"gray\" : \"white\";\r\n  //     setState({ bg: new_bg });\r\n  //   }, [card]);\r\n  //   const imgURL = `/images/react.svg`;\r\n  //   console.log(props.value.fliped, \"props.fliped\");\r\n  //   let divStyle = props.value.fliped\r\n  //     ? {\r\n  //         background: null,\r\n  //       }\r\n  //     : { background: \"white\" };\r\n\r\n  //   console.log(divStyle, \"divStyle\");\r\n\r\n  function getImage(name) {\r\n    if (name === \"React\") {\r\n      return \"react-img\";\r\n    } else if (name === \"Vue\") {\r\n      return \"vue-img\";\r\n    } else if (name === \"Javascript\") {\r\n      return \"js-img\";\r\n    } else if (name === \"Python\") {\r\n      return \"py-img\";\r\n    } else if (name === \"Angular\") {\r\n      return \"angular-img\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"m-2 radius card-box \" +\r\n        (props.value.flipped\r\n          ? getImage(props.value.name) + \" border flip\"\r\n          : \"card-bg border\")\r\n      }\r\n      onClick={() => {\r\n        props.onClick(props.value);\r\n      }}\r\n      id={props.value.name}\r\n      //   style={divStyle}\r\n      //   src={props.value.fliped ? imgURL : null}\r\n    >\r\n      {/* <div className=\"d-flex  justify-content-between w-100\">        \r\n      </div> */}\r\n      <p className=\"d-flex justify-content-center align-items-center h-100 text-size\">\r\n        {props.value.flipped ? \"\" : \"ðŸ˜›\"}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ShowCards;\r\n","import React from \"react\";\r\nimport ShowCards from \"./showCards\";\r\n\r\nfunction Footer(props) {\r\n  console.log(props, \"props value in Footer///\");\r\n  return (\r\n    <div\r\n      style={{ display: props.gameDone ? \"block\" : \"none\" }}\r\n      className=\"text-center py-5 mt-3 text-white\"\r\n    >\r\n      <h1> It took you {props.turn} turns to finish</h1>\r\n      <button className=\"mt-3 btn btn-dark\" onClick={props.onClick}>\r\n        play again?\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport ShowCards from \"./showCards\";\r\n\r\nfunction Card(props) {\r\n  console.log(props, \"props value in Card///\");\r\n  const cards = props.value.cards_arr.map((card) => (\r\n    <ShowCards\r\n      // changeHandle={this.props.changeHandle}\r\n      // changeToggle={this.props.changeToggle}\r\n      key={card.id}\r\n      value={card}\r\n      onClick={props.onClick}\r\n    />\r\n  ));\r\n\r\n  return <div className=\"d-flex flex-wrap cards-container\">{cards}</div>;\r\n}\r\n\r\nexport default Card;\r\n","// Structure Tree\r\n// root\r\n//   App\r\n//     Nav\r\n//     Card\r\n//       displaycard\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport Nav from \"./components/nav\";\r\nimport Footer from \"./components/footer\";\r\nimport Card from \"./components/card\";\r\nimport uniqid from \"uniqid\";\r\n// const savedCards = JSON.parse(localStorage.getItem(\"library\"));\r\n\r\nfunction App() {\r\n  const [cards, setCards] = useState({\r\n    cards_arr: [],\r\n  });\r\n\r\n  const [firstCard, setFirstCard] = useState({\r\n    name: \"\",\r\n    id: \"\",\r\n  });\r\n\r\n  const [gameDone, setgameDone] = useState(false);\r\n\r\n  const [playNum, setplayNum] = useState(0);\r\n\r\n  const [pairedNum, setPairedNum] = useState(0);\r\n\r\n  const [count, setCount] = useState(0);\r\n\r\n  const [turn, setTurn] = useState(0);\r\n\r\n  const [lockBoard, setlockBoard] = useState(false);\r\n\r\n  // this UseEffect is equal to a componentDidMount lifecycle method (if it ends with empty array)\r\n  // the hook runs one time when the component mounts (is inserted in the DOM tree)\r\n  useEffect(() => {\r\n    // console.log(\"UseEffect to create cards fired!\");\r\n    let new_arr = []; // create new array so change in setCards becomes smooth\r\n    for (let i = 0; i < 5; i++) {\r\n      // create name that corresponds to card\r\n      let card_name;\r\n      if (i === 0) card_name = \"Python\";\r\n      else if (i === 1) card_name = \"Javascript\";\r\n      else if (i === 2) card_name = \"React\";\r\n      else if (i === 3) card_name = \"Vue\";\r\n      else if (i === 4) card_name = \"Angular\";\r\n\r\n      for (let j = 0; j < 2; j++) {\r\n        // we need 2 same objects so generatng id above to create 2 corresponding cards\r\n        let new_obj = {\r\n          id: uniqid(),\r\n          flipped: false,\r\n          name: card_name,\r\n          paired: false,\r\n        };\r\n        new_arr.push(new_obj); // Push the object\r\n      }\r\n    }\r\n    new_arr = shuffle(new_arr);\r\n    setCards({ cards_arr: new_arr });\r\n    // playNum only fires when it changes meaning when game ends\r\n    // and this useEffect will create new array which triggers all the other functions\r\n  }, [playNum]);\r\n\r\n  function shuffle(a) {\r\n    for (let i = a.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [a[i], a[j]] = [a[j], a[i]];\r\n    }\r\n    return a;\r\n  }\r\n\r\n  // cause infinite loop as we modify setcount in useEffect which keeps firing for eternity\r\n  // useEffect(() => {\r\n  //   if (count === 2) {\r\n  //     setTurn(turn + 1);\r\n  //     setCount(0);\r\n  //   } else {\r\n  //     setCount(count + 1); // useEffect there is a delay!\r\n  //     console.log(count, \"count!==2\");\r\n  //   }\r\n  // }, []);\r\n\r\n  function handleClick(props) {\r\n    // only fires when the card is either not flipped or already guessed\r\n    // if 2 cards are flipped, not fires\r\n    if (!props.paired && !props.flipped && !lockBoard) {\r\n      const editCards = flipCard(props);\r\n      setCards({ cards_arr: editCards });\r\n\r\n      // 2 cards are filipped\r\n      if (count === 1) {\r\n        setlockBoard(true);\r\n        console.log(\r\n          firstCard,\r\n          props.name,\r\n          \"//firstCard, props.name in count 1\"\r\n        );\r\n        if (firstCard.name === props.name) {\r\n          // let new_deck = hanldePaired(props.name);\r\n          // setCards({ cards_arr: new_deck });\r\n          setTimeout(() => {\r\n            hanldePaired(props.name);\r\n          }, 1200);\r\n          setPairedNum(pairedNum + 1);\r\n        } else {\r\n          // unflip firstcard and props.name\r\n          setTimeout(() => {\r\n            unflipChosenCard(firstCard.id, props.id);\r\n          }, 1200);\r\n          setFirstCard({ name: \"\", id: \"\" });\r\n        }\r\n        setTurn(turn + 1);\r\n        setCount(0);\r\n        console.log(turn, count, \"count==2\");\r\n        // setlockBoard(false);\r\n        //  if change the state of it in the function (if statement?), it will not become effective by the time the function is done executing, so change it in another function\r\n      }\r\n      // just one card is flipped\r\n      else {\r\n        console.log(\r\n          firstCard,\r\n          props.name,\r\n          \"//firstCard, props.name in count 0\"\r\n        );\r\n        // takes care of first guess\r\n        setFirstCard({ name: props.name, id: props.id });\r\n        setCount(count + 1); // useEffect there is a delay!\r\n        console.log(count, \"count!==2\");\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (pairedNum === 5) {\r\n      console.log(\"job done took you\" + turn + \"turns\");\r\n      setgameDone(true);\r\n    }\r\n  }, [pairedNum]);\r\n\r\n  function resetGame() {\r\n    setPairedNum(0);\r\n    setplayNum(playNum + 1);\r\n    setTurn(0);\r\n    setgameDone(false); // hide footer\r\n  }\r\n\r\n  function flipCard(props) {\r\n    console.log(\"//// flip executed\");\r\n    const editCards = cards.cards_arr.map((item) => {\r\n      // create new object for item\r\n      var temp = Object.assign({}, item);\r\n      if (item.id === props.id) {\r\n        temp.flipped = !temp.flipped;\r\n        // temp.bg = changed_state;\r\n        // console.log(temp, \"temp//////\");\r\n      }\r\n      return temp;\r\n    });\r\n    // console.log(editCards, \"//// editCards\");\r\n    return editCards;\r\n  }\r\n\r\n  function hanldePaired(name) {\r\n    console.log(\"//// hanldePaired executed\");\r\n    const editCards = cards.cards_arr.map((item) => {\r\n      // create new object for item\r\n      var temp = Object.assign({}, item);\r\n      if (item.name === name) {\r\n        temp.paired = true;\r\n        temp.flipped = true;\r\n        // make second guess card flip\r\n      }\r\n      return temp;\r\n    });\r\n    setlockBoard(false);\r\n    setCards({ cards_arr: editCards });\r\n    // return editCards;\r\n  }\r\n\r\n  function unflipChosenCard(firstCardId, SecondCardId) {\r\n    // setlockBoard(true);\r\n    console.log(\"//// unflipChosenCard executed\");\r\n    const editCards = cards.cards_arr.map((item) => {\r\n      // create new object for item\r\n      var temp = Object.assign({}, item);\r\n      if (item.id === firstCardId || item.id === SecondCardId) {\r\n        temp.flipped = false;\r\n      }\r\n      return temp;\r\n    });\r\n    setlockBoard(false);\r\n    setCards({ cards_arr: editCards });\r\n    // return editCards;g\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Nav turn={turn} playNum={playNum} />\r\n      <Card\r\n        value={cards}\r\n        onClick={handleClick}\r\n        // changeHandle={deleteHandle}\r\n        // changeToggle={handleToggle}\r\n      />\r\n      <Footer turn={turn} gameDone={gameDone} onClick={resetGame}></Footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}